/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.senpure.io.support.plugin.intellij.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.senpure.io.support.plugin.intellij.psi.IoTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_IoLexer.flex</tt>
 */
public class _IoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\16\0\1\34\2\7\1\23\1\22\1\25\1\7\1\24\3\7\1"+
    "\0\1\35\1\0\1\36\3\0\1\46\1\64\1\3\1\51\1\45\1\54\1\47\1\50\1\53\1\66\1\67"+
    "\1\55\1\44\1\52\1\57\1\61\1\62\1\70\1\4\1\43\1\63\1\65\1\32\1\56\1\60\1\32"+
    "\1\37\1\0\1\40\1\0\1\33\1\0\1\26\1\30\1\5\1\21\1\20\1\16\1\15\1\32\1\10\2"+
    "\32\1\13\1\32\1\11\1\14\2\32\1\31\1\6\1\12\1\27\2\32\1\17\2\32\1\41\1\0\1"+
    "\42\7\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\1\4\6\3\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\3\1\13\1\14"+
    "\7\3\1\15\3\3\1\16\123\3\1\17\15\3\1\20"+
    "\1\21\11\3\1\22\1\23\3\3\1\24\1\25\1\26"+
    "\5\3\1\27\6\3\1\30\3\3\1\31\2\3\1\32"+
    "\1\33\2\3\1\34\6\3\1\35\3\3\1\36\2\3"+
    "\1\37\1\3\1\40\1\3\1\41\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\u0357\0\u0201\0\u0201"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0201\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876"+
    "\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u0201"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u0201\0\u0201\0\u1b63"+
    "\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u0201\0\u0201\0\u1d64\0\u1d9d\0\u1dd6\0\u0201\0\u0201\0\u0201"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u0201\0\u1f2c\0\u1f65"+
    "\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u0201\0\u2082\0\u20bb\0\u20f4"+
    "\0\u0201\0\u212d\0\u2166\0\u0201\0\u0201\0\u219f\0\u21d8\0\u0201"+
    "\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u0201\0\u2367"+
    "\0\u23a0\0\u23d9\0\u0201\0\u2412\0\u244b\0\u0201\0\u2484\0\u0201"+
    "\0\u24bd\0\u0201\0\u0201";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\12\1\13\2\12\1\14\2\12\1\15\4\10\2\12"+
    "\1\16\2\12\1\2\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\25\12\72\0\2\3\71\0\1\12"+
    "\1\27\27\12\7\0\26\12\3\0\1\30\6\12\1\31"+
    "\21\12\7\0\26\12\3\0\3\12\1\27\25\12\7\0"+
    "\26\12\3\0\2\12\1\30\2\12\1\11\1\12\1\31"+
    "\1\13\2\12\1\32\15\12\7\0\26\12\7\0\1\10"+
    "\12\0\4\10\46\0\6\12\1\33\22\12\7\0\26\12"+
    "\3\0\31\12\7\0\26\12\3\0\11\12\1\34\17\12"+
    "\7\0\26\12\3\0\10\12\1\35\20\12\7\0\26\12"+
    "\3\0\11\12\1\36\17\12\7\0\26\12\3\0\11\12"+
    "\1\37\17\12\7\0\26\12\34\0\1\40\37\0\30\12"+
    "\1\41\7\0\26\12\3\0\26\12\1\42\2\12\7\0"+
    "\26\12\3\0\5\12\1\43\23\12\7\0\26\12\3\0"+
    "\7\12\1\44\21\12\7\0\26\12\3\0\6\12\1\45"+
    "\22\12\7\0\26\12\3\0\11\12\1\46\17\12\7\0"+
    "\26\12\3\0\24\12\1\47\4\12\7\0\26\12\3\0"+
    "\11\12\1\50\17\12\7\0\26\12\2\40\1\0\66\40"+
    "\3\0\31\12\7\0\1\12\1\51\1\52\4\12\1\53"+
    "\1\54\1\55\7\12\1\56\1\12\1\57\2\12\3\0"+
    "\5\12\1\34\23\12\7\0\26\12\3\0\14\12\1\60"+
    "\14\12\7\0\26\12\3\0\12\12\1\44\16\12\7\0"+
    "\26\12\3\0\23\12\1\33\5\12\7\0\26\12\3\0"+
    "\25\12\1\61\3\12\7\0\26\12\3\0\10\12\1\62"+
    "\20\12\7\0\26\12\3\0\31\12\7\0\2\12\1\63"+
    "\23\12\3\0\31\12\7\0\7\12\1\64\12\12\1\65"+
    "\3\12\3\0\31\12\7\0\3\12\1\66\22\12\3\0"+
    "\31\12\7\0\1\12\1\67\24\12\3\0\31\12\7\0"+
    "\10\12\1\70\15\12\3\0\31\12\7\0\2\12\1\71"+
    "\23\12\3\0\31\12\7\0\3\12\1\72\22\12\3\0"+
    "\15\12\1\73\13\12\7\0\26\12\3\0\10\12\1\74"+
    "\20\12\7\0\26\12\3\0\15\12\1\75\13\12\7\0"+
    "\26\12\3\0\1\12\1\76\27\12\7\0\26\12\3\0"+
    "\31\12\7\0\20\12\1\77\5\12\3\0\31\12\7\0"+
    "\2\12\1\100\23\12\3\0\31\12\7\0\1\12\1\101"+
    "\24\12\3\0\31\12\7\0\16\12\1\102\7\12\3\0"+
    "\31\12\7\0\2\12\1\103\23\12\3\0\31\12\7\0"+
    "\3\12\1\104\22\12\3\0\31\12\7\0\22\12\1\105"+
    "\3\12\3\0\16\12\1\106\12\12\7\0\26\12\3\0"+
    "\15\12\1\44\13\12\7\0\26\12\3\0\23\12\1\107"+
    "\5\12\7\0\26\12\3\0\1\12\1\110\27\12\7\0"+
    "\26\12\3\0\31\12\7\0\1\12\1\111\24\12\3\0"+
    "\31\12\7\0\7\12\1\112\16\12\3\0\31\12\7\0"+
    "\2\12\1\113\23\12\3\0\31\12\7\0\14\12\1\114"+
    "\11\12\3\0\31\12\7\0\12\12\1\115\13\12\3\0"+
    "\31\12\7\0\7\12\1\116\16\12\3\0\31\12\7\0"+
    "\3\12\1\117\22\12\3\0\17\12\1\120\1\12\1\121"+
    "\7\12\7\0\26\12\3\0\6\12\1\44\22\12\7\0"+
    "\26\12\3\0\31\12\7\0\3\12\1\122\22\12\3\0"+
    "\30\12\1\123\7\0\26\12\3\0\31\12\7\0\1\124"+
    "\25\12\3\0\1\12\1\125\27\12\7\0\26\12\3\0"+
    "\31\12\7\0\25\12\1\126\3\0\31\12\7\0\6\12"+
    "\1\127\17\12\3\0\30\12\1\130\7\0\26\12\3\0"+
    "\30\12\1\131\7\0\26\12\3\0\20\12\1\44\10\12"+
    "\7\0\26\12\3\0\22\12\1\44\6\12\7\0\26\12"+
    "\3\0\31\12\7\0\4\12\1\132\21\12\3\0\31\12"+
    "\7\0\5\12\1\133\1\12\1\134\16\12\3\0\30\12"+
    "\1\135\7\0\26\12\3\0\31\12\7\0\16\12\1\136"+
    "\7\12\3\0\31\12\7\0\1\137\25\12\3\0\30\12"+
    "\1\140\7\0\26\12\3\0\31\12\7\0\5\12\1\141"+
    "\1\12\1\142\16\12\3\0\31\12\7\0\16\12\1\143"+
    "\7\12\3\0\31\12\7\0\2\12\1\144\23\12\3\0"+
    "\31\12\7\0\2\12\1\145\23\12\3\0\31\12\7\0"+
    "\3\12\1\146\22\12\3\0\31\12\7\0\5\12\1\147"+
    "\1\12\1\150\1\151\15\12\3\0\31\12\7\0\3\12"+
    "\1\152\22\12\3\0\30\12\1\153\7\0\26\12\3\0"+
    "\1\154\30\12\7\0\1\155\6\12\1\156\1\157\15\12"+
    "\3\0\31\12\7\0\2\12\1\160\23\12\3\0\31\12"+
    "\7\0\3\12\1\161\22\12\3\0\31\12\7\0\3\12"+
    "\1\162\22\12\3\0\30\12\1\163\7\0\26\12\3\0"+
    "\31\12\7\0\3\12\1\164\22\12\3\0\31\12\7\0"+
    "\1\12\1\165\24\12\3\0\31\12\7\0\2\12\1\166"+
    "\23\12\3\0\31\12\7\0\3\12\1\167\22\12\3\0"+
    "\31\12\7\0\6\12\1\170\17\12\3\0\1\171\30\12"+
    "\7\0\26\12\3\0\31\12\7\0\5\12\1\172\14\12"+
    "\1\173\3\12\3\0\31\12\7\0\14\12\1\174\11\12"+
    "\3\0\31\12\7\0\15\12\1\175\10\12\3\0\31\12"+
    "\7\0\3\12\1\176\22\12\3\0\31\12\7\0\7\12"+
    "\1\177\16\12\3\0\31\12\7\0\3\12\1\200\22\12"+
    "\3\0\31\12\7\0\1\12\1\201\24\12\3\0\1\202"+
    "\30\12\7\0\26\12\3\0\31\12\7\0\5\12\1\203"+
    "\1\12\1\204\1\205\15\12\3\0\31\12\7\0\6\12"+
    "\1\206\17\12\3\0\31\12\7\0\2\12\1\207\23\12"+
    "\3\0\31\12\7\0\3\12\1\210\22\12\3\0\31\12"+
    "\7\0\1\12\1\211\24\12\3\0\31\12\7\0\2\12"+
    "\1\212\23\12\3\0\31\12\7\0\2\12\1\213\23\12"+
    "\3\0\31\12\7\0\3\12\1\214\22\12\3\0\31\12"+
    "\7\0\1\12\1\215\24\12\3\0\31\12\7\0\16\12"+
    "\1\216\7\12\3\0\31\12\7\0\1\12\1\217\24\12"+
    "\3\0\31\12\7\0\6\12\1\220\17\12\3\0\31\12"+
    "\7\0\6\12\1\221\17\12\3\0\31\12\7\0\2\12"+
    "\1\222\23\12\3\0\31\12\7\0\24\12\1\223\1\12"+
    "\3\0\31\12\7\0\2\12\1\224\23\12\3\0\31\12"+
    "\7\0\3\12\1\225\22\12\3\0\31\12\7\0\6\12"+
    "\1\226\17\12\3\0\31\12\7\0\6\12\1\227\17\12"+
    "\3\0\31\12\7\0\2\12\1\230\23\12\3\0\30\12"+
    "\1\231\7\0\26\12\3\0\31\12\7\0\3\12\1\232"+
    "\22\12\3\0\31\12\7\0\12\12\1\233\13\12\3\0"+
    "\31\12\7\0\1\12\1\234\24\12\3\0\31\12\7\0"+
    "\2\12\1\235\23\12\3\0\31\12\7\0\2\12\1\236"+
    "\23\12\3\0\31\12\7\0\2\12\1\237\23\12\3\0"+
    "\30\12\1\240\7\0\26\12\3\0\31\12\7\0\3\12"+
    "\1\241\22\12\3\0\31\12\7\0\1\12\1\242\24\12"+
    "\3\0\31\12\7\0\5\12\1\243\14\12\1\244\3\12"+
    "\3\0\31\12\7\0\6\12\1\245\17\12\3\0\31\12"+
    "\7\0\20\12\1\246\5\12\3\0\31\12\7\0\2\12"+
    "\1\247\23\12\3\0\30\12\1\250\7\0\26\12\3\0"+
    "\31\12\7\0\13\12\1\251\12\12\3\0\31\12\7\0"+
    "\5\12\1\252\14\12\1\253\3\12\3\0\31\12\7\0"+
    "\6\12\1\254\17\12\3\0\31\12\7\0\2\12\1\255"+
    "\23\12\3\0\31\12\7\0\2\12\1\256\23\12\3\0"+
    "\31\12\7\0\3\12\1\257\22\12\3\0\31\12\7\0"+
    "\2\12\1\260\23\12\3\0\31\12\7\0\7\12\1\261"+
    "\16\12\3\0\31\12\7\0\17\12\1\262\6\12\3\0"+
    "\31\12\7\0\2\12\1\263\23\12\3\0\31\12\7\0"+
    "\3\12\1\264\22\12\3\0\31\12\7\0\3\12\1\265"+
    "\22\12\3\0\31\12\7\0\12\12\1\266\13\12\3\0"+
    "\31\12\7\0\1\267\25\12\3\0\31\12\7\0\20\12"+
    "\1\270\5\12\3\0\31\12\7\0\3\12\1\271\22\12"+
    "\3\0\31\12\7\0\12\12\1\272\13\12\3\0\31\12"+
    "\7\0\6\12\1\273\17\12\3\0\31\12\7\0\20\12"+
    "\1\274\5\12\3\0\31\12\7\0\14\12\1\275\11\12"+
    "\3\0\31\12\7\0\6\12\1\276\17\12\3\0\31\12"+
    "\7\0\20\12\1\277\5\12\3\0\31\12\7\0\2\12"+
    "\1\300\23\12\3\0\31\12\7\0\1\301\25\12\3\0"+
    "\31\12\7\0\2\12\1\302\23\12\3\0\31\12\7\0"+
    "\2\12\1\303\23\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9462];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\6\11\256\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _IoLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _IoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 35: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 36: break;
          case 3: 
            { return T_IDENTIFIER;
            } 
            // fall through
          case 37: break;
          case 4: 
            { return T_DIGIT;
            } 
            // fall through
          case 38: break;
          case 5: 
            { return T_SEMICOLON;
            } 
            // fall through
          case 39: break;
          case 6: 
            { return T_EQUAL;
            } 
            // fall through
          case 40: break;
          case 7: 
            { return T_LEFT_BRACKET;
            } 
            // fall through
          case 41: break;
          case 8: 
            { return T_RIGHT_BRACKET;
            } 
            // fall through
          case 42: break;
          case 9: 
            { return T_LEFT_BRACE;
            } 
            // fall through
          case 43: break;
          case 10: 
            { return T_RIGHT_BRACE;
            } 
            // fall through
          case 44: break;
          case 11: 
            { return T_MESSAGE_TYPE_CS;
            } 
            // fall through
          case 45: break;
          case 12: 
            { return T_MESSAGE_TYPE_SC;
            } 
            // fall through
          case 46: break;
          case 13: 
            { return T_LINE_COMMENT;
            } 
            // fall through
          case 47: break;
          case 14: 
            { return T_FIELD_TYPE_BASE;
            } 
            // fall through
          case 48: break;
          case 15: 
            { return T_EVENT_ID;
            } 
            // fall through
          case 49: break;
          case 16: 
            { return T_ENUM_HEAD;
            } 
            // fall through
          case 50: break;
          case 17: 
            { return T_ENUM_NAME;
            } 
            // fall through
          case 51: break;
          case 18: 
            { return T_BEAN_HEAD;
            } 
            // fall through
          case 52: break;
          case 19: 
            { return T_BEAN_NAME;
            } 
            // fall through
          case 53: break;
          case 20: 
            { return T_MESSAGE_ID;
            } 
            // fall through
          case 54: break;
          case 21: 
            { return T_EVENT_HEAD;
            } 
            // fall through
          case 55: break;
          case 22: 
            { return T_EVENT_NAME;
            } 
            // fall through
          case 56: break;
          case 23: 
            { return T_FIELD_NAME;
            } 
            // fall through
          case 57: break;
          case 24: 
            { return T_IMPORT_HEAD;
            } 
            // fall through
          case 58: break;
          case 25: 
            { return T_FIELD_INDEX;
            } 
            // fall through
          case 59: break;
          case 26: 
            { return T_MESSAGE_HEAD;
            } 
            // fall through
          case 60: break;
          case 27: 
            { return T_MESSAGE_NAME;
            } 
            // fall through
          case 61: break;
          case 28: 
            { return T_IMPORT_VALUE;
            } 
            // fall through
          case 62: break;
          case 29: 
            { return T_FIELD_COMMENT;
            } 
            // fall through
          case 63: break;
          case 30: 
            { return T_NAMESPACE_HEAD;
            } 
            // fall through
          case 64: break;
          case 31: 
            { return T_JAVA_PACK_HEAD;
            } 
            // fall through
          case 65: break;
          case 32: 
            { return T_NAMESPACE_VALUE;
            } 
            // fall through
          case 66: break;
          case 33: 
            { return T_JAVA_PACK_VALUE;
            } 
            // fall through
          case 67: break;
          case 34: 
            { return T_FIELD_TYPE_QUOTE;
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.senpure.io.support.plugin.intellij.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.senpure.io.support.plugin.intellij.psi.IoTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_IoLexer.flex</tt>
 */
public class _IoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\2\0\1\35\13\0\1\34\2\7\1\23\1\22\1\25\1\7\1"+
    "\24\3\7\1\0\1\36\1\0\1\37\3\0\1\47\1\65\1\3\1\52\1\46\1\55\1\50\1\51\1\54"+
    "\1\67\1\70\1\56\1\45\1\53\1\60\1\62\1\63\1\71\1\4\1\44\1\64\1\66\1\32\1\57"+
    "\1\61\1\32\1\40\1\0\1\41\1\0\1\33\1\0\1\26\1\30\1\5\1\21\1\20\1\16\1\15\1"+
    "\32\1\10\2\32\1\13\1\32\1\11\1\14\2\32\1\31\1\6\1\12\1\27\2\32\1\17\2\32\1"+
    "\42\1\0\1\43\7\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1"+
    "\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\1\4\6\3\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\3\1\14"+
    "\1\15\7\3\1\16\2\3\1\17\132\3\1\20\16\3"+
    "\1\21\1\22\12\3\1\23\1\24\3\3\1\25\1\26"+
    "\1\27\5\3\1\30\7\3\1\31\3\3\1\32\2\3"+
    "\1\33\1\34\2\3\1\35\6\3\1\36\3\3\1\37"+
    "\5\3\1\40\5\3\1\41\6\3\1\42\1\3\1\43"+
    "\1\3\1\44\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\u03a0\0\u020a"+
    "\0\u020a\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u020a\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c"+
    "\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c"+
    "\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u020a\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u020a\0\u020a\0\u1dae"+
    "\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u020a\0\u020a\0\u1ff2\0\u202c\0\u2066\0\u020a\0\u020a"+
    "\0\u020a\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u020a\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u020a\0\u2358"+
    "\0\u2392\0\u23cc\0\u020a\0\u2406\0\u2440\0\u020a\0\u020a\0\u247a"+
    "\0\u24b4\0\u020a\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610"+
    "\0\u020a\0\u264a\0\u2684\0\u26be\0\u020a\0\u26f8\0\u2732\0\u276c"+
    "\0\u27a6\0\u27e0\0\u020a\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902"+
    "\0\u020a\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u020a"+
    "\0\u2a98\0\u020a\0\u2ad2\0\u020a\0\u020a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\12\1\13\2\12\1\14\2\12\1\15\4\10\2\12"+
    "\1\16\2\12\1\2\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\25\12\73\0\2\3\72\0"+
    "\1\12\1\30\27\12\10\0\26\12\3\0\1\31\6\12"+
    "\1\32\21\12\10\0\26\12\3\0\3\12\1\30\25\12"+
    "\10\0\26\12\3\0\2\12\1\31\2\12\1\11\1\12"+
    "\1\32\1\13\20\12\10\0\26\12\7\0\1\10\12\0"+
    "\4\10\47\0\6\12\1\33\22\12\10\0\26\12\3\0"+
    "\31\12\10\0\26\12\3\0\11\12\1\34\17\12\10\0"+
    "\26\12\3\0\5\12\1\35\2\12\1\36\20\12\10\0"+
    "\26\12\3\0\11\12\1\37\17\12\10\0\26\12\3\0"+
    "\11\12\1\40\17\12\10\0\26\12\34\0\1\41\35\0"+
    "\2\20\1\0\67\20\3\0\30\12\1\42\10\0\26\12"+
    "\3\0\26\12\1\43\2\12\10\0\26\12\3\0\7\12"+
    "\1\44\21\12\10\0\26\12\3\0\6\12\1\45\22\12"+
    "\10\0\26\12\3\0\14\12\1\46\14\12\10\0\26\12"+
    "\3\0\11\12\1\47\17\12\10\0\26\12\3\0\24\12"+
    "\1\50\4\12\10\0\26\12\3\0\11\12\1\51\17\12"+
    "\10\0\26\12\2\41\1\0\67\41\3\0\31\12\10\0"+
    "\1\12\1\52\1\53\4\12\1\54\1\55\1\56\1\57"+
    "\6\12\1\60\1\12\1\61\2\12\3\0\5\12\1\34"+
    "\23\12\10\0\26\12\3\0\12\12\1\44\16\12\10\0"+
    "\26\12\3\0\15\12\1\62\13\12\10\0\26\12\3\0"+
    "\23\12\1\33\5\12\10\0\26\12\3\0\25\12\1\63"+
    "\3\12\10\0\26\12\3\0\10\12\1\64\20\12\10\0"+
    "\26\12\3\0\31\12\10\0\2\12\1\65\23\12\3\0"+
    "\31\12\10\0\7\12\1\66\12\12\1\67\3\12\3\0"+
    "\31\12\10\0\3\12\1\70\22\12\3\0\31\12\10\0"+
    "\1\12\1\71\24\12\3\0\31\12\10\0\10\12\1\72"+
    "\15\12\3\0\31\12\10\0\20\12\1\73\5\12\3\0"+
    "\31\12\10\0\2\12\1\74\23\12\3\0\31\12\10\0"+
    "\3\12\1\75\22\12\3\0\16\12\1\76\12\12\10\0"+
    "\26\12\3\0\10\12\1\77\20\12\10\0\26\12\3\0"+
    "\15\12\1\100\13\12\10\0\26\12\3\0\1\12\1\101"+
    "\27\12\10\0\26\12\3\0\31\12\10\0\20\12\1\102"+
    "\5\12\3\0\31\12\10\0\2\12\1\103\23\12\3\0"+
    "\31\12\10\0\1\12\1\104\24\12\3\0\31\12\10\0"+
    "\16\12\1\105\7\12\3\0\31\12\10\0\2\12\1\106"+
    "\23\12\3\0\31\12\10\0\3\12\1\107\22\12\3\0"+
    "\31\12\10\0\3\12\1\110\22\12\3\0\31\12\10\0"+
    "\22\12\1\111\3\12\3\0\17\12\1\112\1\12\1\113"+
    "\7\12\10\0\26\12\3\0\15\12\1\44\13\12\10\0"+
    "\26\12\3\0\23\12\1\114\5\12\10\0\26\12\3\0"+
    "\1\12\1\115\27\12\10\0\26\12\3\0\31\12\10\0"+
    "\1\12\1\116\24\12\3\0\31\12\10\0\7\12\1\117"+
    "\16\12\3\0\31\12\10\0\2\12\1\120\23\12\3\0"+
    "\31\12\10\0\14\12\1\121\11\12\3\0\31\12\10\0"+
    "\12\12\1\122\13\12\3\0\30\12\1\123\10\0\26\12"+
    "\3\0\31\12\10\0\7\12\1\124\16\12\3\0\31\12"+
    "\10\0\3\12\1\125\22\12\3\0\20\12\1\44\10\12"+
    "\10\0\26\12\3\0\22\12\1\44\6\12\10\0\26\12"+
    "\3\0\6\12\1\44\22\12\10\0\26\12\3\0\31\12"+
    "\10\0\3\12\1\126\22\12\3\0\30\12\1\127\10\0"+
    "\26\12\3\0\31\12\10\0\1\130\25\12\3\0\1\12"+
    "\1\131\27\12\10\0\26\12\3\0\31\12\10\0\25\12"+
    "\1\132\3\0\31\12\10\0\6\12\1\133\17\12\3\0"+
    "\31\12\10\0\7\12\1\134\16\12\3\0\30\12\1\135"+
    "\10\0\26\12\3\0\30\12\1\136\10\0\26\12\3\0"+
    "\31\12\10\0\4\12\1\137\21\12\3\0\31\12\10\0"+
    "\5\12\1\140\1\12\1\141\16\12\3\0\30\12\1\142"+
    "\10\0\26\12\3\0\31\12\10\0\16\12\1\143\7\12"+
    "\3\0\31\12\10\0\1\144\25\12\3\0\30\12\1\145"+
    "\10\0\26\12\3\0\31\12\10\0\3\12\1\146\22\12"+
    "\3\0\31\12\10\0\5\12\1\147\1\12\1\150\16\12"+
    "\3\0\31\12\10\0\16\12\1\151\7\12\3\0\31\12"+
    "\10\0\2\12\1\152\23\12\3\0\31\12\10\0\2\12"+
    "\1\153\23\12\3\0\31\12\10\0\3\12\1\154\22\12"+
    "\3\0\31\12\10\0\5\12\1\155\1\12\1\156\1\157"+
    "\15\12\3\0\31\12\10\0\3\12\1\160\22\12\3\0"+
    "\30\12\1\161\10\0\26\12\3\0\1\162\30\12\10\0"+
    "\1\163\6\12\1\164\1\165\15\12\3\0\31\12\10\0"+
    "\1\12\1\166\24\12\3\0\31\12\10\0\2\12\1\167"+
    "\23\12\3\0\31\12\10\0\3\12\1\170\22\12\3\0"+
    "\31\12\10\0\3\12\1\171\22\12\3\0\30\12\1\172"+
    "\10\0\26\12\3\0\31\12\10\0\3\12\1\173\22\12"+
    "\3\0\31\12\10\0\1\12\1\174\24\12\3\0\31\12"+
    "\10\0\2\12\1\175\23\12\3\0\31\12\10\0\3\12"+
    "\1\176\22\12\3\0\31\12\10\0\6\12\1\177\17\12"+
    "\3\0\1\200\30\12\10\0\26\12\3\0\31\12\10\0"+
    "\5\12\1\201\14\12\1\202\3\12\3\0\31\12\10\0"+
    "\14\12\1\203\11\12\3\0\31\12\10\0\15\12\1\204"+
    "\10\12\3\0\31\12\10\0\3\12\1\205\22\12\3\0"+
    "\31\12\10\0\7\12\1\206\16\12\3\0\31\12\10\0"+
    "\2\12\1\207\23\12\3\0\31\12\10\0\3\12\1\210"+
    "\22\12\3\0\31\12\10\0\1\12\1\211\24\12\3\0"+
    "\1\212\30\12\10\0\26\12\3\0\31\12\10\0\5\12"+
    "\1\213\1\12\1\214\1\215\15\12\3\0\31\12\10\0"+
    "\6\12\1\216\17\12\3\0\31\12\10\0\2\12\1\217"+
    "\23\12\3\0\31\12\10\0\3\12\1\220\22\12\3\0"+
    "\31\12\10\0\1\12\1\221\24\12\3\0\31\12\10\0"+
    "\2\12\1\222\23\12\3\0\31\12\10\0\2\12\1\223"+
    "\23\12\3\0\31\12\10\0\3\12\1\224\22\12\3\0"+
    "\31\12\10\0\1\12\1\225\24\12\3\0\31\12\10\0"+
    "\16\12\1\226\7\12\3\0\31\12\10\0\1\12\1\227"+
    "\24\12\3\0\31\12\10\0\6\12\1\230\17\12\3\0"+
    "\1\12\1\231\27\12\10\0\26\12\3\0\31\12\10\0"+
    "\6\12\1\232\17\12\3\0\31\12\10\0\2\12\1\233"+
    "\23\12\3\0\31\12\10\0\24\12\1\234\1\12\3\0"+
    "\31\12\10\0\2\12\1\235\23\12\3\0\31\12\10\0"+
    "\3\12\1\236\22\12\3\0\31\12\10\0\6\12\1\237"+
    "\17\12\3\0\31\12\10\0\6\12\1\240\17\12\3\0"+
    "\31\12\10\0\2\12\1\241\23\12\3\0\30\12\1\242"+
    "\10\0\26\12\3\0\31\12\10\0\3\12\1\243\22\12"+
    "\3\0\31\12\10\0\12\12\1\244\13\12\3\0\31\12"+
    "\10\0\1\12\1\245\24\12\3\0\31\12\10\0\2\12"+
    "\1\246\23\12\3\0\31\12\10\0\2\12\1\247\23\12"+
    "\3\0\31\12\10\0\2\12\1\250\23\12\3\0\31\12"+
    "\10\0\16\12\1\251\7\12\3\0\31\12\10\0\3\12"+
    "\1\252\22\12\3\0\31\12\10\0\3\12\1\253\22\12"+
    "\3\0\31\12\10\0\1\12\1\254\24\12\3\0\31\12"+
    "\10\0\5\12\1\255\14\12\1\256\3\12\3\0\31\12"+
    "\10\0\6\12\1\257\17\12\3\0\31\12\10\0\20\12"+
    "\1\260\5\12\3\0\31\12\10\0\2\12\1\261\23\12"+
    "\3\0\30\12\1\262\10\0\26\12\3\0\31\12\10\0"+
    "\13\12\1\263\12\12\3\0\31\12\10\0\3\12\1\264"+
    "\22\12\3\0\31\12\10\0\4\12\1\265\21\12\3\0"+
    "\31\12\10\0\6\12\1\266\17\12\3\0\31\12\10\0"+
    "\2\12\1\267\23\12\3\0\31\12\10\0\2\12\1\270"+
    "\23\12\3\0\31\12\10\0\3\12\1\271\22\12\3\0"+
    "\31\12\10\0\2\12\1\272\23\12\3\0\31\12\10\0"+
    "\7\12\1\273\16\12\3\0\31\12\10\0\17\12\1\274"+
    "\6\12\3\0\1\275\30\12\10\0\26\12\3\0\31\12"+
    "\10\0\2\12\1\276\23\12\3\0\31\12\10\0\3\12"+
    "\1\277\22\12\3\0\31\12\10\0\12\12\1\300\13\12"+
    "\3\0\31\12\10\0\1\301\25\12\3\0\31\12\10\0"+
    "\20\12\1\302\5\12\3\0\31\12\10\0\2\12\1\303"+
    "\23\12\3\0\30\12\1\304\10\0\26\12\3\0\31\12"+
    "\10\0\6\12\1\305\17\12\3\0\31\12\10\0\20\12"+
    "\1\306\5\12\3\0\31\12\10\0\14\12\1\307\11\12"+
    "\3\0\30\12\1\310\10\0\26\12\3\0\31\12\10\0"+
    "\5\12\1\311\14\12\1\312\3\12\3\0\31\12\10\0"+
    "\2\12\1\313\23\12\3\0\31\12\10\0\1\314\25\12"+
    "\3\0\31\12\10\0\5\12\1\315\14\12\1\316\3\12"+
    "\3\0\31\12\10\0\2\12\1\317\23\12\3\0\31\12"+
    "\10\0\3\12\1\320\22\12\3\0\31\12\10\0\2\12"+
    "\1\321\23\12\3\0\31\12\10\0\2\12\1\322\23\12"+
    "\3\0\31\12\10\0\3\12\1\323\22\12\3\0\31\12"+
    "\10\0\3\12\1\324\22\12\3\0\31\12\10\0\12\12"+
    "\1\325\13\12\3\0\31\12\10\0\3\12\1\326\22\12"+
    "\3\0\31\12\10\0\12\12\1\327\13\12\3\0\31\12"+
    "\10\0\6\12\1\330\17\12\3\0\31\12\10\0\20\12"+
    "\1\331\5\12\3\0\31\12\10\0\6\12\1\332\17\12"+
    "\3\0\31\12\10\0\20\12\1\333\5\12\3\0\31\12"+
    "\10\0\2\12\1\334\23\12\3\0\31\12\10\0\2\12"+
    "\1\335\23\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11020];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\6\11\307\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _IoLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _IoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 38: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 39: break;
          case 3: 
            { return T_IDENTIFIER;
            } 
            // fall through
          case 40: break;
          case 4: 
            { return T_DIGIT;
            } 
            // fall through
          case 41: break;
          case 5: 
            { return T_CODE_COMMENT;
            } 
            // fall through
          case 42: break;
          case 6: 
            { return T_SEMICOLON;
            } 
            // fall through
          case 43: break;
          case 7: 
            { return T_EQUAL;
            } 
            // fall through
          case 44: break;
          case 8: 
            { return T_LEFT_BRACKET;
            } 
            // fall through
          case 45: break;
          case 9: 
            { return T_RIGHT_BRACKET;
            } 
            // fall through
          case 46: break;
          case 10: 
            { return T_LEFT_BRACE;
            } 
            // fall through
          case 47: break;
          case 11: 
            { return T_RIGHT_BRACE;
            } 
            // fall through
          case 48: break;
          case 12: 
            { return T_MESSAGE_TYPE_CS;
            } 
            // fall through
          case 49: break;
          case 13: 
            { return T_MESSAGE_TYPE_SC;
            } 
            // fall through
          case 50: break;
          case 14: 
            { return T_LINE_COMMENT;
            } 
            // fall through
          case 51: break;
          case 15: 
            { return T_FIELD_TYPE_BASE;
            } 
            // fall through
          case 52: break;
          case 16: 
            { return T_EVENT_ID;
            } 
            // fall through
          case 53: break;
          case 17: 
            { return T_ENUM_HEAD;
            } 
            // fall through
          case 54: break;
          case 18: 
            { return T_ENUM_NAME;
            } 
            // fall through
          case 55: break;
          case 19: 
            { return T_BEAN_HEAD;
            } 
            // fall through
          case 56: break;
          case 20: 
            { return T_BEAN_NAME;
            } 
            // fall through
          case 57: break;
          case 21: 
            { return T_MESSAGE_ID;
            } 
            // fall through
          case 58: break;
          case 22: 
            { return T_EVENT_HEAD;
            } 
            // fall through
          case 59: break;
          case 23: 
            { return T_EVENT_NAME;
            } 
            // fall through
          case 60: break;
          case 24: 
            { return T_FIELD_NAME;
            } 
            // fall through
          case 61: break;
          case 25: 
            { return T_IMPORT_HEAD;
            } 
            // fall through
          case 62: break;
          case 26: 
            { return T_FIELD_INDEX;
            } 
            // fall through
          case 63: break;
          case 27: 
            { return T_MESSAGE_HEAD;
            } 
            // fall through
          case 64: break;
          case 28: 
            { return T_MESSAGE_NAME;
            } 
            // fall through
          case 65: break;
          case 29: 
            { return T_IMPORT_VALUE;
            } 
            // fall through
          case 66: break;
          case 30: 
            { return T_FIELD_COMMENT;
            } 
            // fall through
          case 67: break;
          case 31: 
            { return T_NAMESPACE_HEAD;
            } 
            // fall through
          case 68: break;
          case 32: 
            { return T_NAMESPACE_VALUE;
            } 
            // fall through
          case 69: break;
          case 33: 
            { return T_FIELD_TYPE_QUOTE;
            } 
            // fall through
          case 70: break;
          case 34: 
            { return T_JAVA_PACKAGE_HEAD;
            } 
            // fall through
          case 71: break;
          case 35: 
            { return T_LUA_NAMESPACE_HEAD;
            } 
            // fall through
          case 72: break;
          case 36: 
            { return T_JAVA_PACKAGE_VALUE;
            } 
            // fall through
          case 73: break;
          case 37: 
            { return T_LUA_NAMESPACE_VALUE;
            } 
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

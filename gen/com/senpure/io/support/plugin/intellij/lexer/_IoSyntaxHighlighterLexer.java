/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.senpure.io.support.plugin.intellij.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.senpure.io.support.plugin.intellij.psi.IoTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_IoSyntaxHighlighterLexer.flex</tt>
 */
public class _IoSyntaxHighlighterLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MESSAGE_TAG = 2;
  public static final int FIELD_TAG = 4;
  public static final int FIELD_NAME_TAG = 6;
  public static final int BEAN_TAG = 8;
  public static final int EVENT_TAG = 10;
  public static final int ENUM_TAG = 12;
  public static final int ENUM_FIELD_TAG = 14;
  public static final int IMPORT_TAG = 16;
  public static final int NAMEPACE_TAG = 18;
  public static final int JAVA_PACK_TAG = 20;
  public static final int ENTITY_TAG = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\15\0\1\44\1\35\2\7\1\23\1\22\1\25\1\7\1\24"+
    "\3\7\1\0\1\45\1\0\1\51\3\0\2\32\1\3\14\32\1\42\2\32\1\4\7\32\1\47\1\34\1\50"+
    "\1\0\1\33\1\0\1\26\1\30\1\5\1\21\1\20\1\16\1\15\1\32\1\10\1\40\1\43\1\13\1"+
    "\36\1\11\1\14\1\37\1\32\1\31\1\6\1\12\1\27\1\41\1\32\1\17\2\32\1\46\1\0\1"+
    "\52\7\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\5\3\1\1\2\3\1\4\1\5"+
    "\1\6\1\7\1\10\4\11\1\12\1\11\1\1\10\13"+
    "\1\1\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\1\1\24\2\1\1\25\2\26\2\27\5\3"+
    "\1\30\2\3\1\31\1\32\1\33\7\13\1\34\1\35"+
    "\2\0\1\33\1\26\1\27\7\3\2\13\1\36\4\13"+
    "\1\0\1\33\2\3\1\37\1\3\1\40\2\3\3\13"+
    "\1\41\1\33\2\3\1\42\2\3\3\13\1\41\1\43"+
    "\3\3\2\13\1\3\1\44\1\3\2\13\1\3\1\45"+
    "\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u01d9\0\u01d9\0\u01d9"+
    "\0\u01d9\0\u01d9\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u01d9\0\u068d\0\u06b8\0\u06e3"+
    "\0\u070e\0\u01d9\0\u0739\0\u01d9\0\u0764\0\u078f\0\u01d9\0\u07ba"+
    "\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912"+
    "\0\u093d\0\u0968\0\u0993\0\u045e\0\u045e\0\u09be\0\u09e9\0\u0a14"+
    "\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0764"+
    "\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99"+
    "\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u04b4\0\u0d9b\0\u0dc6"+
    "\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u022f\0\u0ef3"+
    "\0\u022f\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0764\0\u0ff5"+
    "\0\u1020\0\u104b\0\u022f\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122"+
    "\0\u0b97\0\u022f\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224"+
    "\0\u022f\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u022f\0\u022f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\2\15\4\16\1\14\1\17\1\20\6\16\1\21"+
    "\1\16\4\14\2\16\1\22\2\16\2\14\1\23\1\24"+
    "\1\16\1\25\3\16\1\14\1\26\1\27\1\30\1\31"+
    "\1\14\1\32\1\14\2\15\1\33\1\34\1\35\1\36"+
    "\1\37\12\40\4\37\5\40\2\14\1\41\6\40\1\14"+
    "\1\26\1\27\1\30\1\31\1\14\1\32\1\14\2\15"+
    "\1\42\1\43\1\42\1\44\1\14\1\45\2\42\1\46"+
    "\2\42\1\47\2\42\1\50\4\14\2\42\1\51\2\42"+
    "\2\14\1\52\6\42\1\14\1\26\1\27\1\30\1\31"+
    "\1\14\1\32\1\14\2\15\4\53\1\54\12\53\4\54"+
    "\5\53\2\14\1\41\6\53\1\14\1\26\1\27\1\30"+
    "\1\31\1\55\1\32\1\14\2\15\4\56\1\14\12\56"+
    "\4\14\5\56\2\14\1\41\6\56\1\14\1\26\1\27"+
    "\1\30\1\31\1\14\1\32\1\14\2\15\4\57\1\60"+
    "\12\57\4\60\5\57\2\14\1\41\6\57\1\14\1\26"+
    "\1\27\1\30\1\31\1\14\1\32\1\14\2\15\4\61"+
    "\1\14\12\61\4\14\5\61\2\14\1\41\6\61\1\14"+
    "\1\26\1\62\1\30\1\31\1\14\1\32\1\14\2\15"+
    "\4\53\1\54\12\53\4\54\5\53\2\14\1\63\6\53"+
    "\1\14\1\64\1\27\1\30\1\31\1\55\1\32\1\14"+
    "\2\15\32\65\1\66\7\65\1\67\1\27\1\30\1\31"+
    "\1\14\1\32\1\14\2\15\32\70\1\71\7\70\1\67"+
    "\1\27\1\30\1\31\1\14\1\32\1\14\2\15\32\72"+
    "\1\73\7\72\1\67\1\27\1\30\1\31\1\14\1\32"+
    "\54\0\2\15\53\0\31\16\2\0\6\16\12\0\31\16"+
    "\2\0\1\74\5\16\12\0\23\16\1\75\5\16\2\0"+
    "\6\16\12\0\6\16\1\76\22\16\2\0\3\16\1\77"+
    "\2\16\12\0\15\16\1\100\13\16\2\0\6\16\44\0"+
    "\1\101\20\0\15\16\1\102\13\16\2\0\6\16\12\0"+
    "\23\16\1\103\5\16\2\0\6\16\12\0\1\40\1\104"+
    "\27\40\2\0\6\40\12\0\1\105\30\40\2\0\6\40"+
    "\12\0\3\40\1\104\25\40\2\0\6\40\12\0\2\40"+
    "\1\105\26\40\2\0\6\40\16\0\1\37\12\0\4\37"+
    "\30\0\31\40\2\0\6\40\44\0\1\106\20\0\31\42"+
    "\2\0\6\42\12\0\7\42\1\107\21\42\2\0\6\42"+
    "\12\0\5\42\1\45\1\42\1\107\1\46\2\42\1\110"+
    "\15\42\2\0\6\42\12\0\6\42\1\111\22\42\2\0"+
    "\6\42\12\0\11\42\1\112\17\42\2\0\6\42\12\0"+
    "\10\42\1\113\20\42\2\0\6\42\12\0\11\42\1\114"+
    "\17\42\2\0\6\42\12\0\11\42\1\115\17\42\2\0"+
    "\6\42\44\0\1\116\20\0\31\53\2\0\6\53\16\0"+
    "\1\54\12\0\4\54\30\0\31\56\2\0\6\56\12\0"+
    "\31\57\2\0\6\57\16\0\1\60\12\0\4\60\30\0"+
    "\31\61\2\0\6\61\44\0\1\117\20\0\41\120\1\121"+
    "\11\0\32\120\1\122\6\120\1\121\11\0\42\70\11\0"+
    "\32\70\1\123\7\70\11\0\42\72\11\0\32\72\1\124"+
    "\7\72\11\0\31\16\2\0\1\16\1\125\4\16\12\0"+
    "\31\16\2\0\1\126\5\16\12\0\24\16\1\127\4\16"+
    "\2\0\6\16\12\0\15\16\1\130\13\16\2\0\6\16"+
    "\12\0\23\16\1\131\5\16\2\0\6\16\7\0\2\101"+
    "\1\0\50\101\3\0\3\16\1\132\25\16\2\0\6\16"+
    "\12\0\31\16\2\0\3\16\1\133\2\16\7\0\2\106"+
    "\1\0\50\106\3\0\26\42\1\134\2\42\2\0\6\42"+
    "\12\0\5\42\1\135\23\42\2\0\6\42\12\0\7\42"+
    "\1\136\21\42\2\0\6\42\12\0\6\42\1\137\22\42"+
    "\2\0\6\42\12\0\11\42\1\140\17\42\2\0\6\42"+
    "\12\0\24\42\1\141\4\42\2\0\6\42\12\0\11\42"+
    "\1\142\17\42\2\0\6\42\7\0\2\116\1\0\50\116"+
    "\2\117\1\0\50\117\3\0\5\120\1\143\33\120\1\121"+
    "\6\0\2\106\1\0\41\122\1\144\10\106\1\0\42\123"+
    "\10\106\1\0\42\124\6\106\3\0\11\16\1\145\17\16"+
    "\2\0\6\16\12\0\15\16\1\146\13\16\2\0\6\16"+
    "\12\0\31\16\2\0\1\147\5\16\12\0\6\16\1\150"+
    "\22\16\2\0\6\16\12\0\6\16\1\151\22\16\2\0"+
    "\6\16\12\0\3\16\1\152\25\16\2\0\6\16\12\0"+
    "\23\16\1\153\5\16\2\0\6\16\12\0\5\42\1\112"+
    "\23\42\2\0\6\42\12\0\14\42\1\154\14\42\2\0"+
    "\6\42\12\0\12\42\1\136\16\42\2\0\6\42\12\0"+
    "\23\42\1\111\5\42\2\0\6\42\12\0\25\42\1\155"+
    "\3\42\2\0\6\42\12\0\10\42\1\156\20\42\2\0"+
    "\6\42\12\0\11\120\1\157\27\120\1\121\6\0\2\106"+
    "\1\0\5\122\1\160\33\122\1\144\6\106\3\0\26\16"+
    "\1\161\2\16\2\0\6\16\12\0\3\16\1\162\25\16"+
    "\2\0\6\16\12\0\7\16\1\163\21\16\2\0\6\16"+
    "\12\0\23\16\1\164\5\16\2\0\6\16\12\0\31\16"+
    "\2\0\4\16\1\165\1\16\12\0\15\42\1\166\13\42"+
    "\2\0\6\42\12\0\10\42\1\167\20\42\2\0\6\42"+
    "\12\0\15\42\1\170\13\42\2\0\6\42\7\0\2\106"+
    "\1\0\11\122\1\171\27\122\1\144\6\106\3\0\7\16"+
    "\1\172\21\16\2\0\6\16\12\0\31\16\2\0\1\16"+
    "\1\173\4\16\12\0\12\16\1\174\16\16\2\0\6\16"+
    "\12\0\23\16\1\175\5\16\2\0\6\16\12\0\16\42"+
    "\1\176\12\42\2\0\6\42\12\0\15\42\1\136\13\42"+
    "\2\0\6\42\12\0\23\42\1\177\5\42\2\0\6\42"+
    "\12\0\23\16\1\200\5\16\2\0\6\16\12\0\15\16"+
    "\1\201\13\16\2\0\6\16\12\0\2\16\1\202\26\16"+
    "\2\0\6\16\12\0\17\42\1\203\1\42\1\204\7\42"+
    "\2\0\6\42\12\0\6\42\1\136\22\42\2\0\6\42"+
    "\12\0\2\16\1\205\26\16\2\0\6\16\12\0\31\16"+
    "\2\0\5\16\1\206\12\0\20\42\1\136\10\42\2\0"+
    "\6\42\12\0\22\42\1\136\6\42\2\0\6\42\12\0"+
    "\15\16\1\207\13\16\2\0\6\16\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4859];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\11\1\5\11\22\1\1\11\4\1\1\11"+
    "\1\1\1\11\2\1\1\11\30\1\2\0\21\1\1\0"+
    "\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 private int lastState;
  public _IoSyntaxHighlighterLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _IoSyntaxHighlighterLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 39: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 3: 
            { return T_IDENTIFIER;
            } 
            // fall through
          case 41: break;
          case 4: 
            { yybegin(FIELD_TAG);return T_SEMICOLON;
            } 
            // fall through
          case 42: break;
          case 5: 
            { yybegin(FIELD_TAG); return T_LEFT_BRACE;
            } 
            // fall through
          case 43: break;
          case 6: 
            { return T_LEFT_BRACKET;
            } 
            // fall through
          case 44: break;
          case 7: 
            { return T_RIGHT_BRACKET;
            } 
            // fall through
          case 45: break;
          case 8: 
            { yybegin(YYINITIAL);return T_RIGHT_BRACE;
            } 
            // fall through
          case 46: break;
          case 9: 
            { return T_MESSAGE_NAME;
            } 
            // fall through
          case 47: break;
          case 10: 
            { return T_MESSAGE_ID;
            } 
            // fall through
          case 48: break;
          case 11: 
            { yybegin(FIELD_NAME_TAG); return T_FIELD_TYPE_QUOTE;
            } 
            // fall through
          case 49: break;
          case 12: 
            { return T_FIELD_NAME;
            } 
            // fall through
          case 50: break;
          case 13: 
            { return T_FIELD_INDEX;
            } 
            // fall through
          case 51: break;
          case 14: 
            { return T_EQUAL;
            } 
            // fall through
          case 52: break;
          case 15: 
            { return T_BEAN_NAME;
            } 
            // fall through
          case 53: break;
          case 16: 
            { return T_EVENT_NAME;
            } 
            // fall through
          case 54: break;
          case 17: 
            { return T_EVENT_ID;
            } 
            // fall through
          case 55: break;
          case 18: 
            { return T_ENUM_NAME;
            } 
            // fall through
          case 56: break;
          case 19: 
            { yybegin(ENUM_FIELD_TAG); return T_LEFT_BRACE;
            } 
            // fall through
          case 57: break;
          case 20: 
            { return T_SEMICOLON;
            } 
            // fall through
          case 58: break;
          case 21: 
            { yybegin(YYINITIAL);return T_SEMICOLON;
            } 
            // fall through
          case 59: break;
          case 22: 
            { return T_NAMESPACE_VALUE;
            } 
            // fall through
          case 60: break;
          case 23: 
            { return T_JAVA_PACK_VALUE;
            } 
            // fall through
          case 61: break;
          case 24: 
            { yybegin(ENTITY_TAG); return T_LINE_COMMENT;
            } 
            // fall through
          case 62: break;
          case 25: 
            { return T_MESSAGE_TYPE_CS;
            } 
            // fall through
          case 63: break;
          case 26: 
            { return T_MESSAGE_TYPE_SC;
            } 
            // fall through
          case 64: break;
          case 27: 
            { return T_LINE_COMMENT;
            } 
            // fall through
          case 65: break;
          case 28: 
            { yybegin(FIELD_TAG);return T_FIELD_COMMENT;
            } 
            // fall through
          case 66: break;
          case 29: 
            { ;return T_FIELD_COMMENT;
            } 
            // fall through
          case 67: break;
          case 30: 
            { yybegin(FIELD_NAME_TAG);return T_FIELD_TYPE_BASE;
            } 
            // fall through
          case 68: break;
          case 31: 
            { yybegin(ENUM_TAG); return  T_ENUM_HEAD;
            } 
            // fall through
          case 69: break;
          case 32: 
            { yybegin(BEAN_TAG); return  T_BEAN_HEAD;
            } 
            // fall through
          case 70: break;
          case 33: 
            { return T_IMPORT_VALUE;
            } 
            // fall through
          case 71: break;
          case 34: 
            { yybegin(EVENT_TAG); return  T_EVENT_HEAD;
            } 
            // fall through
          case 72: break;
          case 35: 
            { yybegin(IMPORT_TAG);return  T_IMPORT_HEAD;
            } 
            // fall through
          case 73: break;
          case 36: 
            { yybegin(MESSAGE_TAG); return  T_MESSAGE_HEAD;
            } 
            // fall through
          case 74: break;
          case 37: 
            { yybegin(JAVA_PACK_TAG); return  T_JAVA_PACK_HEAD;
            } 
            // fall through
          case 75: break;
          case 38: 
            { yybegin(NAMEPACE_TAG); return  T_NAMESPACE_HEAD;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

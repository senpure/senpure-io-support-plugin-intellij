/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.senpure.io.support.plugin.intellij.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.senpure.io.support.plugin.intellij.psi.IoTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_IoSyntaxHighlighterLexer.flex</tt>
 */
public class _IoSyntaxHighlighterLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MESSAGE_TAG = 2;
  public static final int FIELD_TAG = 4;
  public static final int FIELD_NAME_TAG = 6;
  public static final int BEAN_TAG = 8;
  public static final int EVENT_TAG = 10;
  public static final int ENUM_TAG = 12;
  public static final int ENUM_FIELD_TAG = 14;
  public static final int IMPORT_TAG = 16;
  public static final int NAMEPACE_TAG = 18;
  public static final int JAVA_PACKAGE_TAG = 20;
  public static final int LUA_NAMESPACE_TAG = 22;
  public static final int ENTITY_TAG = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\2\0\1\37\11\0\1\35\1\47\1\36\2\7\1\23\1\22"+
    "\1\25\1\7\1\24\3\7\1\0\1\50\1\0\1\54\3\0\2\32\1\3\12\32\1\46\1\32\1\44\2\32"+
    "\1\4\7\32\1\52\1\34\1\53\1\0\1\33\1\0\1\26\1\30\1\5\1\21\1\20\1\16\1\15\1"+
    "\32\1\10\1\42\1\45\1\13\1\40\1\11\1\14\1\41\1\32\1\31\1\6\1\12\1\27\1\43\1"+
    "\32\1\17\2\32\1\51\1\0\1\55\7\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1"+
    "\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\6\3\1\1\1\4\2\3\1\5"+
    "\1\6\1\7\1\10\1\11\4\12\1\13\1\12\1\1"+
    "\1\14\10\15\1\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\1\1\27\2\1\1\30"+
    "\2\31\2\32\2\33\6\3\1\34\2\3\1\35\1\36"+
    "\1\37\7\15\1\40\1\41\2\0\1\37\1\31\1\32"+
    "\1\33\10\3\2\15\1\42\4\15\1\0\1\37\3\3"+
    "\1\43\1\3\1\44\2\3\3\15\1\45\1\37\3\3"+
    "\1\46\2\3\3\15\1\45\1\47\4\3\2\15\2\3"+
    "\1\50\1\3\2\15\3\3\1\51\5\3\1\52\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0228\0\u0228\0\u0228\0\u0228\0\u0228\0\u0450\0\u047e\0\u04ac"+
    "\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c"+
    "\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c"+
    "\0\u07ba\0\u0228\0\u07e8\0\u0816\0\u0844\0\u0872\0\u0228\0\u08a0"+
    "\0\u0228\0\u08ce\0\u08fc\0\u0228\0\u092a\0\u0958\0\u0986\0\u09b4"+
    "\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0536\0\u0536\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u08ce"+
    "\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea"+
    "\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u05c0"+
    "\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c"+
    "\0\u11ca\0\u0284\0\u11f8\0\u0284\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u08ce\0\u130c\0\u133a\0\u1368\0\u1396\0\u0284\0\u13c4"+
    "\0\u13f2\0\u1420\0\u144e\0\u147c\0\u0dd6\0\u0284\0\u14aa\0\u14d8"+
    "\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u0284\0\u161a"+
    "\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u0284\0\u172e\0\u175c"+
    "\0\u178a\0\u17b8\0\u17e6\0\u0284\0\u0284";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\2\16\4\17\1\15\1\20\1\21\1\17\1\22"+
    "\4\17\1\23\1\17\4\15\2\17\1\24\2\17\3\15"+
    "\1\25\1\26\1\27\1\17\1\30\4\17\1\15\1\31"+
    "\1\32\1\33\1\34\1\15\1\35\1\15\2\16\1\36"+
    "\1\37\1\40\1\41\1\42\12\43\4\42\5\43\3\15"+
    "\1\44\1\45\7\43\1\15\1\31\1\32\1\33\1\34"+
    "\1\15\1\35\1\15\2\16\1\46\1\47\1\46\1\50"+
    "\1\15\1\51\2\46\1\52\2\46\1\53\2\46\1\54"+
    "\4\15\2\46\1\55\2\46\3\15\1\56\1\57\7\46"+
    "\1\15\1\31\1\32\1\33\1\34\1\15\1\35\1\15"+
    "\2\16\4\60\1\61\12\60\4\61\5\60\3\15\1\44"+
    "\1\45\7\60\1\15\1\31\1\32\1\33\1\34\1\62"+
    "\1\35\1\15\2\16\4\63\1\15\12\63\4\15\5\63"+
    "\3\15\1\44\1\45\7\63\1\15\1\31\1\32\1\33"+
    "\1\34\1\15\1\35\1\15\2\16\4\64\1\65\12\64"+
    "\4\65\5\64\3\15\1\44\1\45\7\64\1\15\1\31"+
    "\1\32\1\33\1\34\1\15\1\35\1\15\2\16\4\66"+
    "\1\15\12\66\4\15\5\66\3\15\1\44\1\45\7\66"+
    "\1\15\1\31\1\67\1\33\1\34\1\15\1\35\1\15"+
    "\2\16\4\60\1\61\12\60\4\61\5\60\3\15\1\70"+
    "\1\45\7\60\1\15\1\71\1\32\1\33\1\34\1\62"+
    "\1\35\1\15\2\16\33\72\1\73\1\45\10\72\1\74"+
    "\1\32\1\33\1\34\1\15\1\35\1\15\2\16\32\75"+
    "\1\15\1\76\1\45\10\75\1\74\1\32\1\33\1\34"+
    "\1\15\1\35\1\15\2\16\32\77\1\15\1\100\1\45"+
    "\10\77\1\74\1\32\1\33\1\34\1\15\1\35\1\15"+
    "\2\16\32\101\1\15\1\102\1\45\10\101\1\74\1\32"+
    "\1\33\1\34\1\15\1\35\57\0\2\16\56\0\31\17"+
    "\4\0\7\17\12\0\31\17\4\0\1\103\6\17\12\0"+
    "\23\17\1\104\5\17\4\0\7\17\12\0\24\17\1\105"+
    "\4\17\4\0\7\17\12\0\6\17\1\106\22\17\4\0"+
    "\3\17\1\107\3\17\12\0\15\17\1\110\13\17\4\0"+
    "\7\17\45\0\1\111\17\0\2\26\1\0\53\26\3\0"+
    "\15\17\1\112\13\17\4\0\7\17\12\0\23\17\1\113"+
    "\5\17\4\0\7\17\12\0\1\43\1\114\27\43\4\0"+
    "\7\43\12\0\1\115\30\43\4\0\7\43\12\0\3\43"+
    "\1\114\25\43\4\0\7\43\12\0\2\43\1\115\26\43"+
    "\4\0\7\43\16\0\1\42\12\0\4\42\33\0\31\43"+
    "\4\0\7\43\45\0\1\116\17\0\2\45\1\0\53\45"+
    "\3\0\31\46\4\0\7\46\12\0\7\46\1\117\21\46"+
    "\4\0\7\46\12\0\5\46\1\51\1\46\1\117\1\52"+
    "\2\46\1\120\15\46\4\0\7\46\12\0\6\46\1\121"+
    "\22\46\4\0\7\46\12\0\11\46\1\122\17\46\4\0"+
    "\7\46\12\0\10\46\1\123\20\46\4\0\7\46\12\0"+
    "\11\46\1\124\17\46\4\0\7\46\12\0\11\46\1\125"+
    "\17\46\4\0\7\46\45\0\1\126\17\0\2\57\1\0"+
    "\53\57\3\0\31\60\4\0\7\60\16\0\1\61\12\0"+
    "\4\61\33\0\31\63\4\0\7\63\12\0\31\64\4\0"+
    "\7\64\16\0\1\65\12\0\4\65\33\0\31\66\4\0"+
    "\7\66\45\0\1\127\22\0\34\130\1\0\7\130\1\131"+
    "\11\0\33\130\1\132\1\0\7\130\1\131\11\0\32\75"+
    "\1\0\1\75\1\0\10\75\11\0\32\75\1\0\1\133"+
    "\1\0\10\75\11\0\32\77\1\0\1\77\1\0\10\77"+
    "\11\0\32\77\1\0\1\134\1\0\10\77\11\0\32\101"+
    "\1\0\1\101\1\0\10\101\11\0\32\101\1\0\1\135"+
    "\1\0\10\101\11\0\31\17\4\0\1\17\1\136\5\17"+
    "\12\0\31\17\4\0\1\137\6\17\12\0\23\17\1\140"+
    "\5\17\4\0\7\17\12\0\24\17\1\141\4\17\4\0"+
    "\7\17\12\0\15\17\1\142\13\17\4\0\7\17\12\0"+
    "\23\17\1\143\5\17\4\0\7\17\7\0\2\111\1\0"+
    "\53\111\3\0\3\17\1\144\25\17\4\0\7\17\12\0"+
    "\31\17\4\0\3\17\1\145\3\17\7\0\2\116\1\0"+
    "\53\116\3\0\26\46\1\146\2\46\4\0\7\46\12\0"+
    "\5\46\1\147\23\46\4\0\7\46\12\0\7\46\1\150"+
    "\21\46\4\0\7\46\12\0\6\46\1\151\22\46\4\0"+
    "\7\46\12\0\11\46\1\152\17\46\4\0\7\46\12\0"+
    "\24\46\1\153\4\46\4\0\7\46\12\0\11\46\1\154"+
    "\17\46\4\0\7\46\7\0\2\126\1\0\53\126\2\127"+
    "\1\0\53\127\3\0\5\130\1\155\26\130\1\0\7\130"+
    "\1\131\6\0\2\116\1\0\34\132\1\116\7\132\1\156"+
    "\10\116\1\0\32\133\1\116\1\133\1\116\10\133\10\116"+
    "\1\0\32\134\1\116\1\134\1\116\10\134\10\116\1\0"+
    "\32\135\1\116\1\135\1\116\10\135\6\116\3\0\11\17"+
    "\1\157\17\17\4\0\7\17\12\0\15\17\1\160\13\17"+
    "\4\0\7\17\12\0\31\17\4\0\6\17\1\161\12\0"+
    "\31\17\4\0\1\162\6\17\12\0\6\17\1\163\22\17"+
    "\4\0\7\17\12\0\6\17\1\164\22\17\4\0\7\17"+
    "\12\0\3\17\1\165\25\17\4\0\7\17\12\0\23\17"+
    "\1\166\5\17\4\0\7\17\12\0\5\46\1\122\23\46"+
    "\4\0\7\46\12\0\14\46\1\167\14\46\4\0\7\46"+
    "\12\0\12\46\1\150\16\46\4\0\7\46\12\0\23\46"+
    "\1\121\5\46\4\0\7\46\12\0\25\46\1\170\3\46"+
    "\4\0\7\46\12\0\10\46\1\171\20\46\4\0\7\46"+
    "\12\0\11\130\1\172\22\130\1\0\7\130\1\131\6\0"+
    "\2\116\1\0\5\132\1\173\26\132\1\116\7\132\1\156"+
    "\6\116\3\0\26\17\1\174\2\17\4\0\7\17\12\0"+
    "\3\17\1\175\25\17\4\0\7\17\12\0\23\17\1\176"+
    "\5\17\4\0\7\17\12\0\7\17\1\177\21\17\4\0"+
    "\7\17\12\0\23\17\1\200\5\17\4\0\7\17\12\0"+
    "\31\17\4\0\4\17\1\201\2\17\12\0\15\46\1\202"+
    "\13\46\4\0\7\46\12\0\10\46\1\203\20\46\4\0"+
    "\7\46\12\0\15\46\1\204\13\46\4\0\7\46\7\0"+
    "\2\116\1\0\11\132\1\205\22\132\1\116\7\132\1\156"+
    "\6\116\3\0\7\17\1\206\21\17\4\0\7\17\12\0"+
    "\31\17\4\0\1\17\1\207\5\17\12\0\31\17\4\0"+
    "\1\210\6\17\12\0\12\17\1\211\16\17\4\0\7\17"+
    "\12\0\23\17\1\212\5\17\4\0\7\17\12\0\16\46"+
    "\1\213\12\46\4\0\7\46\12\0\15\46\1\150\13\46"+
    "\4\0\7\46\12\0\23\46\1\214\5\46\4\0\7\46"+
    "\12\0\23\17\1\215\5\17\4\0\7\17\12\0\15\17"+
    "\1\216\13\17\4\0\7\17\12\0\15\17\1\217\13\17"+
    "\4\0\7\17\12\0\2\17\1\220\26\17\4\0\7\17"+
    "\12\0\17\46\1\221\1\46\1\222\7\46\4\0\7\46"+
    "\12\0\6\46\1\150\22\46\4\0\7\46\12\0\2\17"+
    "\1\223\26\17\4\0\7\17\12\0\3\17\1\224\25\17"+
    "\4\0\7\17\12\0\31\17\4\0\5\17\1\225\1\17"+
    "\12\0\20\46\1\150\10\46\4\0\7\46\12\0\22\46"+
    "\1\150\6\46\4\0\7\46\12\0\15\17\1\226\13\17"+
    "\4\0\7\17\12\0\31\17\4\0\1\17\1\227\5\17"+
    "\12\0\23\17\1\230\5\17\4\0\7\17\12\0\23\17"+
    "\1\231\5\17\4\0\7\17\12\0\12\17\1\232\16\17"+
    "\4\0\7\17\12\0\2\17\1\233\26\17\4\0\7\17"+
    "\12\0\15\17\1\234\13\17\4\0\7\17\12\0\15\17"+
    "\1\235\13\17\4\0\7\17\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6164];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\13\1\5\11\24\1\1\11\4\1\1\11"+
    "\1\1\1\11\2\1\1\11\33\1\2\0\23\1\1\0"+
    "\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 private int lastState;
  public _IoSyntaxHighlighterLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _IoSyntaxHighlighterLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 44: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 45: break;
          case 3: 
            { return T_IDENTIFIER;
            } 
            // fall through
          case 46: break;
          case 4: 
            { yybegin(ENTITY_TAG); return T_CODE_COMMENT;
            } 
            // fall through
          case 47: break;
          case 5: 
            { yybegin(FIELD_TAG);return T_SEMICOLON;
            } 
            // fall through
          case 48: break;
          case 6: 
            { yybegin(FIELD_TAG); return T_LEFT_BRACE;
            } 
            // fall through
          case 49: break;
          case 7: 
            { return T_LEFT_BRACKET;
            } 
            // fall through
          case 50: break;
          case 8: 
            { return T_RIGHT_BRACKET;
            } 
            // fall through
          case 51: break;
          case 9: 
            { yybegin(YYINITIAL);return T_RIGHT_BRACE;
            } 
            // fall through
          case 52: break;
          case 10: 
            { return T_MESSAGE_NAME;
            } 
            // fall through
          case 53: break;
          case 11: 
            { return T_MESSAGE_ID;
            } 
            // fall through
          case 54: break;
          case 12: 
            { return T_CODE_COMMENT;
            } 
            // fall through
          case 55: break;
          case 13: 
            { yybegin(FIELD_NAME_TAG); return T_FIELD_TYPE_QUOTE;
            } 
            // fall through
          case 56: break;
          case 14: 
            { yybegin(FIELD_TAG); return T_CODE_COMMENT;
            } 
            // fall through
          case 57: break;
          case 15: 
            { return T_FIELD_NAME;
            } 
            // fall through
          case 58: break;
          case 16: 
            { return T_FIELD_INDEX;
            } 
            // fall through
          case 59: break;
          case 17: 
            { return T_EQUAL;
            } 
            // fall through
          case 60: break;
          case 18: 
            { return T_BEAN_NAME;
            } 
            // fall through
          case 61: break;
          case 19: 
            { return T_EVENT_NAME;
            } 
            // fall through
          case 62: break;
          case 20: 
            { return T_EVENT_ID;
            } 
            // fall through
          case 63: break;
          case 21: 
            { return T_ENUM_NAME;
            } 
            // fall through
          case 64: break;
          case 22: 
            { yybegin(ENUM_FIELD_TAG); return T_LEFT_BRACE;
            } 
            // fall through
          case 65: break;
          case 23: 
            { return T_SEMICOLON;
            } 
            // fall through
          case 66: break;
          case 24: 
            { yybegin(YYINITIAL);return T_SEMICOLON;
            } 
            // fall through
          case 67: break;
          case 25: 
            { return T_NAMESPACE_VALUE;
            } 
            // fall through
          case 68: break;
          case 26: 
            { return T_JAVA_PACKAGE_VALUE;
            } 
            // fall through
          case 69: break;
          case 27: 
            { return T_LUA_NAMESPACE_VALUE;
            } 
            // fall through
          case 70: break;
          case 28: 
            { yybegin(ENTITY_TAG); return T_LINE_COMMENT;
            } 
            // fall through
          case 71: break;
          case 29: 
            { return T_MESSAGE_TYPE_CS;
            } 
            // fall through
          case 72: break;
          case 30: 
            { return T_MESSAGE_TYPE_SC;
            } 
            // fall through
          case 73: break;
          case 31: 
            { return T_LINE_COMMENT;
            } 
            // fall through
          case 74: break;
          case 32: 
            { yybegin(FIELD_TAG);return T_FIELD_COMMENT;
            } 
            // fall through
          case 75: break;
          case 33: 
            { return T_FIELD_COMMENT;
            } 
            // fall through
          case 76: break;
          case 34: 
            { yybegin(FIELD_NAME_TAG);return T_FIELD_TYPE_BASE;
            } 
            // fall through
          case 77: break;
          case 35: 
            { yybegin(ENUM_TAG); return  T_ENUM_HEAD;
            } 
            // fall through
          case 78: break;
          case 36: 
            { yybegin(BEAN_TAG); return  T_BEAN_HEAD;
            } 
            // fall through
          case 79: break;
          case 37: 
            { return T_IMPORT_VALUE;
            } 
            // fall through
          case 80: break;
          case 38: 
            { yybegin(EVENT_TAG); return  T_EVENT_HEAD;
            } 
            // fall through
          case 81: break;
          case 39: 
            { yybegin(IMPORT_TAG);return  T_IMPORT_HEAD;
            } 
            // fall through
          case 82: break;
          case 40: 
            { yybegin(MESSAGE_TAG); return  T_MESSAGE_HEAD;
            } 
            // fall through
          case 83: break;
          case 41: 
            { yybegin(NAMEPACE_TAG); return  T_NAMESPACE_HEAD;
            } 
            // fall through
          case 84: break;
          case 42: 
            { yybegin(JAVA_PACKAGE_TAG); return  T_JAVA_PACKAGE_HEAD;
            } 
            // fall through
          case 85: break;
          case 43: 
            { yybegin(LUA_NAMESPACE_TAG); return  T_LUA_NAMESPACE_HEAD;
            } 
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

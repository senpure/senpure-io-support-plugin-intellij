{
 parserClass="com.senpure.io.support.plugin.intellij.parser.IoParser"
 parserUtilClass="com.senpure.io.support.plugin.intellij.psi.impl.IoParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Io"
  psiImplClassSuffix="Impl"
  psiPackage="com.senpure.io.support.plugin.intellij.psi"
  psiImplPackage="com.senpure.io.support.plugin.intellij.psi.impl"

  elementTypeHolderClass="com.senpure.io.support.plugin.intellij.psi.IoTypes"
  elementTypeClass="com.senpure.io.support.plugin.intellij.psi.IoElementType"
  tokenTypeClass="com.senpure.io.support.plugin.intellij.psi.IoTokenType"
  psiImplUtilClass="com.senpure.io.support.plugin.intellij.psi.impl.IoPsiImplUtil"

tokens=[

    T_MESSAGE_TYPE_CS="regexp:CS|cs"
    T_MESSAGE_TYPE_SC="regexp:SC|sc"
    T_SEMICOLON=";"
    T_EQUAL="="
    T_LEFT_BRACKET="["
    T_RIGHT_BRACKET="]"
    T_LEFT_BRACE="{"
    T_RIGHT_BRACE="}"
    T_DIGIT="regexp:[0-9]+"
    T_FIELD_TYPE_BASE="regexp:int|long|sint|slong|fixed32|fixed64|float|double|boolean|String|string"
    T_IDENTIFIER="regexp:[a-zA-Z][a-zA-Z0-9_]*"
    T_LINE_COMMENT="regexp://[^\r\n]*"
    T_CODE_COMMENT="regexp:#[^\r\n]*"
  ]
}

 protocol::=head entity*
 head::=headContent*
 entity::=message|bean|event|enum
 //{
 // mixin="com.senpure.io.support.plugin.intellij.psi.impl.IoNamedElementImpl"
 // implements="com.senpure.io.support.plugin.intellij.psi.IoNamedElement"
//  methods=[getName setName getNameIdentifier]
 //}
 message::= entityComment*
           messageHead messageType messageName messageId leftBrace
          field*
          rightBrace
field::=fieldType fieldList? fieldName(equal fieldIndex)?semicolon fieldComment?
entityComment::=T_LINE_COMMENT
messageHead::=T_MESSAGE_HEAD
messageType::=(T_MESSAGE_TYPE_CS|T_MESSAGE_TYPE_SC)
messageName::=T_MESSAGE_NAME
{
  mixin="com.senpure.io.support.plugin.intellij.psi.impl.IoNamedElementImpl"
  implements="com.senpure.io.support.plugin.intellij.psi.IoNamedElement"
  methods=[getName setName getNameIdentifier getPresentation getReferences]
}
messageId::=T_MESSAGE_ID
leftBrace::=T_LEFT_BRACE
rightBrace::=T_RIGHT_BRACE
fieldName::=T_FIELD_NAME
fieldList::=T_LEFT_BRACKET T_RIGHT_BRACKET
equal::=T_EQUAL
fieldIndex::=T_FIELD_INDEX
semicolon::=T_SEMICOLON
fieldComment::=T_FIELD_COMMENT
fieldType::=(T_FIELD_TYPE_BASE|T_FIELD_TYPE_QUOTE)
{
  mixin="com.senpure.io.support.plugin.intellij.psi.impl.IoNamedElementImpl"
  implements="com.senpure.io.support.plugin.intellij.psi.IoNamedElement"
  methods=[getName setName getNameIdentifier getPresentation]
}
//至少需要一个字段才有必要定义bean 语法上不检查
bean::= entityComment*
          beanHead beanName  leftBrace
          field*
          rightBrace

beanHead::=T_BEAN_HEAD
beanName::=T_BEAN_NAME
{
  mixin="com.senpure.io.support.plugin.intellij.psi.impl.IoNamedElementImpl"
  implements="com.senpure.io.support.plugin.intellij.psi.IoNamedElement"
 methods=[getName setName getNameIdentifier getPresentation getReferences]
}

event::= entityComment*
          eventHead eventName eventId leftBrace
          field*
          rightBrace
eventHead ::=T_EVENT_HEAD
eventName ::=T_EVENT_NAME
{
  mixin="com.senpure.io.support.plugin.intellij.psi.impl.IoNamedElementImpl"
  implements="com.senpure.io.support.plugin.intellij.psi.IoNamedElement"
 methods=[getName setName getNameIdentifier getPresentation getReferences]
}
eventId ::=T_EVENT_ID
 //至少需要两个状态才有必要定义枚举,强制第一个位默认值 语法上不检查
enum::=entityComment*
          enumHead enumName leftBrace
          enumField *
          rightBrace
enumHead::=T_ENUM_HEAD
enumName::=T_ENUM_NAME
{
  mixin="com.senpure.io.support.plugin.intellij.psi.impl.IoNamedElementImpl"
  implements="com.senpure.io.support.plugin.intellij.psi.IoNamedElement"
 methods=[getName setName getNameIdentifier getPresentation getReferences]
}
enumField::=fieldName(equal fieldIndex)? semicolon fieldComment?

namespace::=namespaceHead namespaceValue semicolon
namespaceHead ::=T_NAMESPACE_HEAD
namespaceValue ::=T_NAMESPACE_VALUE
javaPackage::=javaPackageHead javaPackageValue semicolon
javaPackageHead::=T_JAVA_PACKAGE_HEAD
javaPackageValue::=T_JAVA_PACKAGE_VALUE
luaNamespace::=luaNamespaceHead luaNamespaceValue semicolon
luaNamespaceHead ::=T_LUA_NAMESPACE_HEAD
luaNamespaceValue ::=T_LUA_NAMESPACE_VALUE
jsNamespace::=jsNamespaceHead jsNamespaceValue semicolon
jsNamespaceHead ::=T_JS_NAMESPACE_HEAD
jsNamespaceValue ::=T_JS_NAMESPACE_VALUE

import::=importHead importValue semicolon
importHead::=T_IMPORT_HEAD
importValue::=T_IMPORT_VALUE
headContent::=import|javaPackage|namespace|luaNamespace|jsNamespace

